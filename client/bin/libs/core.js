// Generated by CoffeeScript 1.6.3
(function() {
  var Player, cancelNotification, host, hostJSON, loginSuccess, renderState, showNotification, successJSON, updateGame, updateNames,
    _this = this;

  this.setCookie = function(name, value, days) {
    var date, expires;
    if (days) {
      date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = "; expires=" + (date.toGMTString());
    } else {
      expires = "";
    }
    return document.cookie = name + "=" + value + expires + "; path=/";
  };

  this.getCookie = function(name) {
    var cookie, cookies, eq, raw_cookie, _i, _len;
    cookies = document.cookie.split(';');
    for (_i = 0, _len = cookies.length; _i < _len; _i++) {
      raw_cookie = cookies[_i];
      cookie = $.trim(raw_cookie);
      eq = cookie.indexOf('=');
      if (cookie.slice(0, eq) === name) {
        return cookie.slice(eq + 1);
      }
    }
    return null;
  };

  this.deleteCookie = function(name) {
    return setCookie(name, "", -1);
  };

  if (this.callback == null) {
    this.callback = [];
  }

  if (this.game == null) {
    this.game = [];
  }

  this.callback.startGame = function(data) {
    this.loadContent("game.html");
    this.game.currentPlayer = new Player(data.player.name, data.player.account, data.player.cards);
    return renderState(data.others);
  };

  this.callback.refreshState = function(data) {
    renderState(data.others);
    return setTimeout(updateGame, 1000);
  };

  this.callback.finishGame = function(data) {};

  renderState = function(data) {
    var div, player;
    div = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        player = data[_i];
        _results.push("<li> " + player.name + "($" + player.account + ") current bid: $" + player.bid + " and player " + player.state + " </li>");
      }
      return _results;
    })();
    div.join(" ");
    return $("#game-state").replaceWith(div);
  };

  updateGame = function() {
    return load('updateGame');
  };

  host = "http://localhost:3000/";

  hostJSON = host + '/test';

  this.loadContent = function(url, parameters) {
    if (parameters == null) {
      parameters = null;
    }
    return $.ajax({
      type: 'GET',
      url: host + url,
      data: parameters,
      success: function(data) {
        return $("#content").replaceWith(data);
      },
      error: function(_, __, text) {
        return notify(text, 2500, notify.error);
      },
      async: false
    });
  };

  this.load = function(method, requestParameters) {
    var parameters;
    parameters = [
      {
        username: username,
        method: method,
        parameters: requestParameters
      }
    ];
    return $.ajax({
      type: "POST",
      url: hostJSON,
      data: JSON.stringify(parameters),
      success: successJSON,
      error: function(_, __, text) {
        return notify("Error while connecting to server", 2500, notify.error);
      },
      timeout: 1000
    });
  };

  if (this.callback == null) {
    this.callback = [];
  }

  successJSON = function(data) {
    var method, parameters;
    if (data.error != null) {
      notify(data.error, 2500, notify.error);
      return false;
    }
    method = data.method;
    parameters = data.parameters;
    if (method in _this.callback) {
      return _this.callback[method](parameters);
    } else {
      notify("Unknown answer from server.", 2500, notify.error);
      return false;
    }
  };

  updateNames = function() {
    return load('updateNames', []);
  };

  if (this.callback == null) {
    this.callback = [];
  }

  this.callback.refreshNames = function(data) {
    var name, nameList, names;
    nameList = (function() {
      var _i, _len, _ref, _results;
      _ref = data.names;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        _results.push("<li> " + name + " - Ready </li>");
      }
      return _results;
    })();
    names = namesList.join(' ');
    $("#player-list").html(names);
    return setTimeout(updateNames, 1000);
  };

  this.logIn = function() {
    var login, parameters;
    login = $('input[name=login]').val();
    if ($('input[name="remember-me"]').prop('checked')) {
      setCookie("username", login, 60);
    }
    parameters = [
      {
        "login": login
      }
    ];
    load('login', parameters, loginSuccess);
    return false;
  };

  loginSuccess = function(data) {
    this.username = data.response;
    loadContent("/lobby.html");
    return refreshNames();
  };

  $(function() {
    var login;
    _this.username = null;
    login = getCookie("username");
    if (login != null) {
      $('input[name="login"]').val(login);
      $('input[name="remember-me"]').prop('checked', true);
    } else {
      notify("<h1>Welcome</h1><div>Please sign in</div>", 3000);
    }
    return $('#form-signin').submit(logIn);
  });

  showNotification = function() {
    var notification;
    notification = $("#notification");
    notification.is('.fly-over');
    return notification.addClass('in');
  };

  cancelNotification = function() {
    var notification;
    notification = $("#notification");
    notification.removeClass('in');
    if (notification.hasClass('error')) {
      setTimeout((function() {
        return notification.removeClass('error');
      }), 200);
    }
    if (notification.hasClass('warning')) {
      return setTimeout((function() {
        return notification.removeClass('warning');
      }), 200);
    }
  };

  this.notify = function(message, time, state) {
    var notification;
    if (state == null) {
      state = notify.normal;
    }
    notification = $("#notification");
    switch (state) {
      case notify.error:
        notification.addClass('error');
        break;
      case notify.warning:
        notification.addClass('warning');
    }
    notification.html(message);
    setTimeout(showNotification, 200);
    return setTimeout(cancelNotification, 200 + time);
  };

  this.notify.normal = 0;

  this.notify.warning = 1;

  this.notify.error = 2;

  $(function() {
    var ntf;
    ntf = $('<div>');
    ntf.attr('id', 'notification');
    ntf.html('<h2>Welcome</h2><div>Please sign in</div>');
    ntf.addClass('jumbotron');
    ntf.addClass('flyover');
    ntf.addClass('flyover-centered');
    return ntf.appendTo($('body'));
  });

  Player = (function() {
    function Player(name, account, cards) {
      this.name = name;
      this.account = account;
      this.cards = cards;
      this.bid = 0;
    }

    Player.prototype.putMoney = function(val) {
      var parameters;
      if (this.account > val) {
        this.bid += val;
        this.account -= val;
        parameters = [
          {
            account: this.account,
            bid: this.bid
          }
        ];
        load('putMoney', parameters);
        return true;
      } else {
        notify("Funds too low", 2000, notify.warning);
        return false;
      }
    };

    return Player;

  })();

}).call(this);
